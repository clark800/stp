#!/bin/sh
set -e

TITLE="${SSG_TITLE}"
EXT="${SSG_EXTENSION:-md}"
PROCESSOR="${SSG_PROCESSOR:-smu}"
CONFIG="${SSG_CONFIG:-.ssg}"
HOOKS=":"

println() {
    printf '%s\n' "$1"
}

log() {
    println "$1" >&2
}

find_files() {
    find "$1" -name '.?*' -prune -o -type f -name "$2" -print
}

process_template() {
    dir="$1"    # templates may use the $dir and $title variables
    title="$2"
    eval "printf '%s\\n' \"$(sed 's/"/\\"/g')\""
}

is_generated() {
    grep -q -x '<meta name="generator" content="ssg">' "$1"
}

is_writable() {
    [ ! -e "$1" ] || is_generated "$1"
}

titlecase() {
    println "$1" | tr '_ -' '\n\n\n' |
    while IFS='' read -r word; do
        printf ' %.1s' "$word" | tr '[:lower:]' '[:upper:]'
        printf '%s' "${word#?}"
    done | cut -c 2-
}

get_meta_value() {
    key="$1"
    html="$2"
    sed -n "s/<meta name=\"$key\" content=\"\(.*\)\">/\1/p" "$html"
}

get_h1_title() {
    sed '/<\/h1>/q' | tr -d '\r\n' | sed -n 's|.*<h1>\(.*\)</h1>.*|\1|p'
}

get_html_title() {
    cat "$1" | tr -d '\r\n' | sed -n 's|.*<title>\(.*\)</title>.*|\1|p'
}

get_site_title() {
    if [ "$TITLE" ]; then
        println "$TITLE"
    else
        title="$(basename "$(pwd)")"
        if [ "${title%.*}" == "$title" ]; then
            titlecase "$title"
        else
            println "$title"    # contains a period; likely a domain name
        fi
    fi
}

get_index_title() {
    if [ "$1" == "." ]; then
        get_site_title
    else
        titlecase "${1##*/}"
    fi
}

insert_meta_sed_cmd() {
    printf '/<title>/i\\\n<meta name="%s" content="%s">\n;' "$1" "$2"
}

set_generator() {
    sed "$(insert_meta_sed_cmd generator ssg)"
}

get_header_template() {
    file="$CONFIG/templates/header.html"
    if [ -r "$file" ]; then
        if is_generated "$file"; then
            cat "$file"
        else
            cat "$file" | set_generator
        fi
    else
        println '<!DOCTYPE html>'
        println '<html lang="en">'
        println '<head>'
        println '<meta charset="utf-8">'
        println '<meta name="generator" content="ssg">'
        println '<title>$title</title>'
        println '<link rel="stylesheet" href="/.ssg/styles/default.css">'
        println '</head>'
        println '<body>'
        println '<header>'
        println '<nav>'
        println '<a href="/directory.html">Directory</a>'
        println '</nav>'
        println '</header>'
        println '<main>'
        println '$(gen_breadcrumb)'
    fi
}

get_header() {
    dir="$1"
    title="$2"
    get_header_template | process_template "$dir" "$title"
}

get_footer_template() {
    if [ -r "$CONFIG/templates/footer.html" ]; then
        cat "$CONFIG/templates/footer.html"
    else
        println '</main>'
        println '</body>'
        println '</html>'
    fi
}

get_footer() {
    dir="$1"
    title="$2"
    get_footer_template | process_template "$dir" "$title"
}

gen_metadata() {
    println "<dl>"
    grep '^% ' "$1" | sed "s|^% \([^:]*\): \(.*\)$|<dt>\1</dt><dd>\2</dd>|"
    println "</dl>"
}

process() {
    source="$1"
    println "<header>"
    (gen_metadata "$source" && println "</header>") > "$source.tmp"
    # hack: add and remove a blank line so we can use sed address range
    # to insert only after the first </h1> tag
    grep -v '^% ' "$source" | $PROCESSOR | sed '1{H;g;}' |
        sed -e "1,/<\/h1>/{/<\/h1>/r $source.tmp" -e '}' | sed '1d'
    rm -f "$source.tmp"
}

set_meta_tags() {
    source="$1"
    command=""
    while read -r line; do
        trimmed="${line#% }"
        if [ "$trimmed" == "$line" ]; then
            continue
        fi
        key="${trimmed%%:*}"
        value="${trimmed#*: }"
        command+="$(insert_meta_sed_cmd "$key" "$value")"
    done < "$source"
    sed "${command%;}"
}

gen_content_page() {
    source="$1"
    dir="${source%/*}"
    content="$(process "$source")"
    title="$(println "$content" | get_h1_title)"
    get_header "$dir" "$title" | set_meta_tags "$source"
    println "<article>"
    println "$content"
    println "</article>"
    get_footer "$dir" "$title"
}

gen_content_pages() {
    # the first pass does a pre-order traversal to processes source files so
    # that titles will be available for breadcrumb navigation without
    # reprocessing the source files; a content page can have subpages so
    # source-generated pages may be in the breadcrumb navigation
    find_files "." "*.$EXT" |
    while IFS='' read -r source; do
        html="${source%.*}.html"
        if is_writable "$html"; then
            log "${html#./}"
            gen_content_page "$source" > "$html"
        fi
    done
}

register_hook() {
    HOOKS="$HOOKS;$1"
}

import_plugins() {
    if [ -r "$CONFIG/plugins" ]; then
        for plugin in "$CONFIG/plugins"/*.sh; do
            if [ -r "$plugin" ]; then
                . "$plugin"
            fi
        done
    fi
}

cd "${1:-.}" || exit 1
import_plugins
gen_content_pages
eval "$HOOKS"
